#!/usr/bin/env ../../../dependencies/python/install/bin/python3
# -*- coding: utf-8 -*-
#
# This scripts reads a fibers.bin file which is generated by opendihu parallel_fiber_estimation. It outputs a stl file containing all fibers.
#
# usage: ./read_mpi_fibers.py [<input filename> [<output filename>]]

import sys, os
import numpy as np
import struct
import stl
from stl import mesh
import datetime

input_filename = "fibers.bin"

if len(sys.argv) >= 2:
  input_filename = sys.argv[1]

output_filename = "{}.stl".format(input_filename)
  
if len(sys.argv) == 3:
  output_filename = sys.argv[1]
  
print("{} -> {}".format(input_filename, output_filename))

with open(input_filename, "rb") as infile:
  
  # parse header
  bytes_raw = infile.read(32)
  header_str = struct.unpack('32s', bytes_raw)[0]
  print("header: {}".format(header_str))
  
  header_length_raw = infile.read(4)
  header_length = struct.unpack('i', header_length_raw)[0]
  parameters = []
  for i in range(int(header_length/4) - 1):
    int_raw = infile.read(4)
    value = struct.unpack('i', int_raw)[0]
    parameters.append(value)
    
  n_fibers_total = parameters[0]
  n_points_whole_fiber = parameters[1]
  
  print("nFibersTotal:      {}".format(parameters[0]))
  print("nPointsWholeFiber: {}".format(parameters[1]))
  print("nBorderPointsXNew: {}".format(parameters[2]))
  print("nBorderPointsZNew: {}".format(parameters[3]))
  print("nFineGridFibers_:  {}".format(parameters[4]))
  print("nRanks:            {}".format(parameters[5]))
  print("nRanksZ:           {}".format(parameters[6]))
  print("nFibersPerRank:    {}".format(parameters[7]))
  print("date:              {:%d.%m.%Y %H:%M:%S}".format(datetime.datetime.fromtimestamp(parameters[8])))
  
  input("Press any key to continue.")
  
  streamlines = []
  for streamline_no in range(n_fibers_total):
    streamline = []
    for point_no in range(n_points_whole_fiber):
      point = []
      for i in range(3):
        double_raw = infile.read(8)
        value = struct.unpack('d', double_raw)[0]
        point.append(value)
      if point[0] == 0.0 and point[1] == 0.0 and point[2] == 0.0:
        print("Error: streamline {} is invalid".format(streamline_no))
      streamline.append(point)
    streamlines.append(streamline)
  
  #streamlines = [streamlines[5]]
  #print(streamlines[0])
  
  triangles = []
  for points in streamlines:
    previous_point = None
    
    for p in points:
      point = np.array([p[0], p[1], p[2]])
      if np.linalg.norm(point) < 1e-3:
        continue
      if previous_point is not None:
        triangles.append([previous_point, point, 0.5*(previous_point+point)])
      previous_point = point

  #---------------------------------------
  # Create the mesh
  out_mesh = mesh.Mesh(np.zeros(len(triangles), dtype=mesh.Mesh.dtype))
  for i, f in enumerate(triangles):
    out_mesh.vectors[i] = f
  #out_mesh.update_normals()

  out_mesh.save(output_filename)
  print("saved {} triangles to \"{}\"".format(len(triangles),output_filename))
