<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="mdao2">

  <snippet type="string" name="corners">
    <![CDATA[
    vec2 d, p, q, h, dd;

    // get camera orthonormal coordinate system
    vec4 tmp;

    vec2 mins, maxs;
    vec3 testPos;
    vec4 projPos;

    // projected camera vector
    vec3 c2 = vec3(dot(vsCamPos.xyz, inCamRight), dot(vsCamPos.xyz, inCamUp), dot(vsCamPos.xyz, inCamFront));

    vec3 cpj1 = inCamFront * c2.z + inCamRight * c2.x;
    vec3 cpm1 = inCamFront * c2.x - inCamRight * c2.z;

    vec3 cpj2 = inCamFront * c2.z + inCamUp * c2.y;
    vec3 cpm2 = inCamFront * c2.y - inCamUp * c2.z;

    d.x = length(cpj1);
    d.y = length(cpj2);

    dd = vec2(1.0) / d;

    p = vsSquaredRad * dd;
    q = d - p;
    h = sqrt(p * q);

    p *= dd;
    h *= dd;

    cpj1 *= p.x;
    cpm1 *= h.x;
    cpj2 *= p.y;
    cpm2 *= h.y;

    testPos = vsObjPos.xyz + cpj1 + cpm1;
    projPos = inMvp * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = projPos.xy;
    maxs = projPos.xy;

    testPos -= 2.0 * cpm1;
    projPos = inMvp * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = min(mins, projPos.xy);
    maxs = max(maxs, projPos.xy);

    testPos = vsObjPos.xyz + cpj2 + cpm2;
    projPos = inMvp * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = min(mins, projPos.xy);
    maxs = max(maxs, projPos.xy);

    testPos -= 2.0 * cpm2;
    projPos = inMvp * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = min(mins, projPos.xy);
    maxs = max(maxs, projPos.xy);
		]]>
  </snippet>
  
	<shader name="vertex">
		<snippet type="string">
			<![CDATA[
#version 150
//#extension GL_ARB_gpu_shader_fp64 : enable
#define CLIP
#define DEPTH

in vec4 position;
in vec4 color;

out vec4 vsColor;

uniform vec4 inViewAttr;
uniform vec3 inCamFront;
uniform vec3 inCamUp;
uniform vec3 inCamRight;
uniform vec4 inCamPos;

uniform mat4 inMvp;
uniform mat4 inMvpInverse;

uniform float inGlobalRadius;
uniform bool inUseGlobalColor;
uniform vec4 inGlobalColor;

uniform bool inUseTransferFunction;
uniform sampler1D inTransferFunction;
uniform vec2 inIndexRange;

uniform vec4 inClipDat;
uniform vec4 inClipCol;

out vec4 vsObjPos;
out vec4 vsCamPos;
out float vsSquaredRad;
out float vsRad;

void main(void) {

    // remove the sphere radius from the w coordinates to the rad varyings
    vsObjPos = position;
    vsRad = (inGlobalRadius == 0.0) ? vsObjPos.w : inGlobalRadius;
    vsObjPos.w = 1.0;

	vsColor = color;
	if (inUseGlobalColor)
		vsColor = inGlobalColor;
	else
	if (inUseTransferFunction) {
		float texOffset = 0.5/float(textureSize(inTransferFunction, 0));
		float normPos = (color.r - inIndexRange.x)/(inIndexRange.y - inIndexRange.x);
		vsColor = texture(inTransferFunction, normPos * (1.0 - 2.0*texOffset) + texOffset);
	}

    vsSquaredRad = vsRad * vsRad;

    // calculate cam position
    vsCamPos.xyz = inCamPos.xyz -  vsObjPos.xyz; // cam pos to glyph space

    // Sphere-Touch-Plane-Approach
    vec2 winHalf = 2.0 / inViewAttr.zw; // window size
		]]>
    </snippet>
    <snippet name="corners" />
    <snippet type="string">
      <![CDATA[
    // clipping
    float od = inClipDat.w - 1.0;
    if (any(notEqual(inClipDat.xyz, vec3(0, 0, 0)))) {
        od = dot(vsObjPos.xyz, inClipDat.xyz) - vsRad;
    }
	
    gl_Position = vec4((mins + maxs) * 0.5, projPos.z, (od > inClipDat.w) ? 0.0 : 1.0);
    maxs = (maxs - mins) * 0.5 * winHalf;
    gl_PointSize = max(maxs.x, maxs.y) + 0.5;
}		
		]]>
		</snippet>
	</shader>

  <shader name="geovert">
    <snippet type="version">150</snippet>
    <snippet type="string">
      <![CDATA[
in vec4 position;
in vec4 color;

out vec4 colorgs;

uniform vec4 inViewAttr;
uniform vec3 inCamFront;
uniform vec3 inCamUp;
uniform vec3 inCamRight;
uniform vec4 inCamPos;

uniform mat4 inMvp;
uniform mat4 inMvpInverse;

uniform float inGlobalRadius;
uniform bool inUseGlobalColor;
uniform vec4 inGlobalColor;

uniform bool inUseTransferFunction;
uniform sampler1D inTransferFunction;
uniform vec2 inIndexRange;

uniform vec4 inClipDat;
uniform vec4 inClipCol;

void main(void) {
    colorgs = color;
    gl_Position = position;
}
      
		]]>
    </snippet>
  </shader>
  
  <shader name="geogeo">
    <snippet type="version">150</snippet>
    <snippet type="string">
      <![CDATA[
layout (points) in;
layout (triangle_strip, max_vertices = 4) out;

in vec4 colorgs[1];

out vec4 vsColor;

uniform vec4 inViewAttr;
uniform vec3 inCamFront;
uniform vec3 inCamUp;
uniform vec3 inCamRight;
uniform vec4 inCamPos;

uniform mat4 inMvp;
uniform mat4 inMvpInverse;

uniform float inGlobalRadius;
uniform bool inUseGlobalColor;
uniform vec4 inGlobalColor;

uniform bool inUseTransferFunction;
uniform sampler1D inTransferFunction;
uniform vec2 inIndexRange;

uniform vec4 inClipDat;
uniform vec4 inClipCol;

out vec4 vsObjPos;
out vec4 vsCamPos;
out float vsSquaredRad;
out float vsRad;

void main(void) {

    // remove the sphere radius from the w coordinates to the rad varyings
    vsObjPos = gl_in[0].gl_Position;
    vsRad = (inGlobalRadius == 0.0) ? vsObjPos.w : inGlobalRadius;
    vsObjPos.w = 1.0;

	vsColor = colorgs[0];
	if (inUseGlobalColor)
		vsColor = inGlobalColor;
	else
	if (inUseTransferFunction) {
		float texOffset = 0.5/float(textureSize(inTransferFunction, 0));
		float normPos = (colorgs[0].r - inIndexRange.x)/(inIndexRange.y - inIndexRange.x);
		vsColor = texture(inTransferFunction, normPos * (1.0 - 2.0*texOffset) + texOffset);
	}

    vsSquaredRad = vsRad * vsRad;

    // calculate cam position
    vsCamPos.xyz = inCamPos.xyz -  vsObjPos.xyz; // cam pos to glyph space

    // Sphere-Touch-Plane-Approach
    vec2 winHalf = 2.0 / inViewAttr.zw; // window size
		]]>
    </snippet>
    <snippet name="corners" />
    <snippet type="string">
      <![CDATA[
    // clipping
    float od = inClipDat.w - 1.0;
    if (any(notEqual(inClipDat.xyz, vec3(0, 0, 0)))) {
        od = dot(vsObjPos.xyz, inClipDat.xyz) - vsRad;
    }
	
    //gl_Position = vec4((mins + maxs) * 0.5, projPos.z, (od > inClipDat.w) ? 0.0 : 1.0);
    gl_Position = vec4(mins.x, maxs.y, projPos.z, (od > inClipDat.w) ? 0.0 : 1.0); EmitVertex();
    gl_Position = vec4(mins.x, mins.y, projPos.z, (od > inClipDat.w) ? 0.0 : 1.0); EmitVertex();
    gl_Position = vec4(maxs.x, maxs.y, projPos.z, (od > inClipDat.w) ? 0.0 : 1.0); EmitVertex();
    gl_Position = vec4(maxs.x, mins.y, projPos.z, (od > inClipDat.w) ? 0.0 : 1.0); EmitVertex();
    EndPrimitive();
}		
		]]>
    </snippet>
  </shader>
	
	<shader name="fragment">
		<snippet name="main" type="string">
			<![CDATA[
#version 150
#define CLIP
#define DEPTH

uniform vec4 inViewAttr;

in vec4 vsObjPos;
in vec4 vsCamPos;
in float vsSquaredRad;
in float vsRad;

in vec4 vsColor;

uniform mat4 inMvpInverse;
uniform mat4 inMvpTrans;

uniform vec4 inClipDat;
uniform vec4 inClipCol;

uniform bool inUseHighPrecision;

out vec4 outColor;
out vec4 outNormal;


void main(void) {

    vec4 coord;
    vec3 ray;
    float lambda;

	// transform fragment coordinates from window coordinates to view coordinates.
	coord = gl_FragCoord 
		* vec4(inViewAttr.z, inViewAttr.w, 2.0, 0.0)
		+ vec4(-1.0, -1.0, -1.0, 1.0);


    // transform fragment coordinates from view coordinates to object coordinates.
    coord = inMvpInverse * coord;
    coord /= coord.w;
    coord -= vsObjPos; // ... and to glyph space

    // calc the viewing ray
    ray = normalize(coord.xyz - vsCamPos.xyz);

    // chose color for lighting
    vec4 color = vsColor;
	
    // calculate the geometry-ray-intersection
	float cam_dot_ray = dot(vsCamPos.xyz, ray);
	float cam_dot_cam = dot(vsCamPos.xyz, vsCamPos.xyz);
	
	// off axis of cam-sphere-vector and ray
    float d2s = cam_dot_cam - cam_dot_ray * cam_dot_ray;      
    float radicand = vsSquaredRad - d2s;                        // square of difference of projected length and lambda
    if (radicand < 0.0) {
        discard; 
    }

    float sqrtRadicand = sqrt(radicand);
    lambda = -cam_dot_ray - sqrtRadicand;                           // lambda

    vec3 sphereintersection = lambda * ray + vsCamPos.xyz;    // intersection point in camera coordinates
    vec4 normal = vec4(sphereintersection / vsRad, 0.0);
	
	if (any(notEqual(inClipDat.xyz, vec3(0.0, 0.0, 0.0)))) {
		vec3 planeNormal = normalize(inClipDat.xyz);
		vec3 clipPlaneBase = planeNormal * inClipDat.w;
		float d = -dot(planeNormal, clipPlaneBase - vsObjPos.xyz);
		float dist1 = dot(sphereintersection, planeNormal) + d;
		float dist2 = d;
		float t = -(dot(planeNormal, vsCamPos.xyz) + d) / dot(planeNormal, ray);
		vec3 planeintersect = vsCamPos.xyz + t * ray;
		if (dist1 > 0.0) {
			if (dist2*dist2 < vsSquaredRad) {
				if (dot(planeintersect, planeintersect) < vsSquaredRad) {
					sphereintersection = planeintersect;
					normal = vec4(planeNormal, 1.0);
					color = mix(color, vec4(inClipCol.rgb, 1.0), inClipCol.a);
				} else {
					discard;
				}
			} else {
				discard;
			}
		}
	} 

	outColor = vec4(color.rgb, 1.0);
	outNormal = normal;
	if (!inUseHighPrecision)
		outNormal = outNormal * 0.5 + 0.5;
	
	vec4 hitPosObj = vec4(sphereintersection + vsObjPos.xyz, 1.0);
    float depth = dot(inMvpTrans[2], hitPosObj);
    float depthW = dot(inMvpTrans[3], hitPosObj);
    gl_FragDepth = ((depth / depthW) + 1.0) * 0.5;
}
			]]>
		</snippet>
	</shader>
	
	<namespace name="deferred">
		<shader name="vertex">
			<snippet type="string">
				<![CDATA[
#version 150
				
in vec4 inPosition;

void main()
{
	gl_Position = inPosition;
}
				]]>
			</snippet>
		</shader>
		
		<namespace name="fragment">
			<snippet name="main" type="string">
				<![CDATA[
#version 150
uniform float inWidth;
uniform float inHeight;

uniform mat4 inMvpInverse;

uniform sampler2D inColorTex;
uniform sampler2D inNormalsTex;
uniform sampler2D inDepthTex;

uniform bool inUseHighPrecision;

out vec4 outColor;

// Declaration for local lighting
vec3 evaluateLocalLighting(const in vec3 objPos, const in vec3 objNormal, const in vec3 matColor);

// Declaration for ambient occlusion
float evaluateAmbientOcclusion(const in vec3 objPos, const in vec3 objNormal);


void main()
{
	ivec2 texelCoord = ivec2(gl_FragCoord.xy);
	
	float depth = texelFetch(inDepthTex, texelCoord, 0).r;

	if (depth == 1.0) {
		discard;
		return;
	}

	// Reconstruct object coordinates
	vec4 objPos = inMvpInverse * (vec4(gl_FragCoord.xy/vec2(inWidth, inHeight), depth, 1.0) * 2.0 - 1.0);
	objPos /= objPos.w;

	vec3 color = texelFetch(inColorTex, texelCoord, 0).xyz;
	vec4 normal = texelFetch(inNormalsTex, texelCoord, 0);
	
	if (!inUseHighPrecision)
		normal = normal * 2.0 - 1.0;

	vec3 lightCol = evaluateLocalLighting(objPos.xyz, normal.xyz, color);
	if (normal.w < 1.0)
		lightCol *= evaluateAmbientOcclusion(objPos.xyz, normal.xyz);
	
	outColor = vec4(lightCol, 1.0);
	
	gl_FragDepth = depth;
}
				]]>
			</snippet>
			
			<snippet name="lighting_stub" type="string">
				<![CDATA[
vec3 evaluateLocalLighting(const in vec3 objPos, const in vec3 objNormal, const in vec3 matColor)
{
	return matColor;
}
				]]>
			</snippet>
			
			<snippet name="lighting" type="string">
				<![CDATA[
uniform vec3 inObjLightDir;
uniform vec3 inObjCamPos;
				
vec3 evaluateLocalLighting(const in vec3 objPos, const in vec3 objNormal, const in vec3 matColor)
{
	vec4 lightparams = vec4(0.2, 0.8, 0.4, 10.0);
#define LIGHT_AMBIENT lightparams.x
#define LIGHT_DIFFUSE lightparams.y
#define LIGHT_SPECULAR lightparams.z
#define LIGHT_EXPONENT lightparams.w
	float nDOTl = dot(objNormal, inObjLightDir);

	vec3 reflected = normalize(2.0 * vec3(nDOTl) * objNormal - inObjLightDir);
	vec3 posToCam = -normalize(objPos - inObjCamPos);
	
	return LIGHT_AMBIENT * matColor + 
		   LIGHT_DIFFUSE * matColor * max(nDOTl, 0.0) + 
		   LIGHT_SPECULAR * vec3(pow(max(dot(reflected, posToCam), 0.0), LIGHT_EXPONENT));
}
				]]>
			</snippet>

			
			<snippet name="ambocc_stub" type="string">
				<![CDATA[
float evaluateAmbientOcclusion(const in vec3 objPos, const in vec3 objNormal) 
{
	return 1.0;
}
				]]>
			</snippet>
			
			<snippet name="ambocc" type="string">
				<![CDATA[

uniform sampler3D inDensityTex;
uniform float inAmbVolShortestEdge;
uniform float inAmbVolMaxLod;
uniform float inAOOffset;
uniform float inAOStrength;
uniform float inAOConeLength;

uniform vec3 inBoundsMin;
uniform vec3 inBoundsSize;


// Find a perpendicular vector to v
vec3 perp(vec3 v)
{
	vec3 b = cross(v, vec3(1, 0, 0));
	return normalize(b); 
}


float evaluateAmbientOcclusion(const in vec3 objPos, const in vec3 objNormal) 
{
	// Number of samples per ray
	const int samplesPerRay = 5;
	// Number of total samples
	const int samplesCount = NUM_CONEDIRS*samplesPerRay;

	// Calculate a rotation that transforms the direction vectors to lie around the normal
	// The untransformed direction vectors are distributed around the Y axis
	vec3 new_y = normalize(objNormal);
	vec3 new_x = cross(new_y, normalize(objPos));
	vec3 new_z = cross(new_x, new_y);
	mat3 dirRot = (mat3(new_x, new_y, new_z));

	float ambient = 0.0;
	
	// Convert the object position to a normalized position
	vec3 normalizedPos = (objPos-inBoundsMin)/inBoundsSize;

	// Calculate the ambient factors
	
	for (int i=0; i<NUM_CONEDIRS; ++i) {
		vec3 dir = (dirRot * coneDirs[i].xyz);

		float ambientCone = 0.0;
		float rayStep = 0.0;
		float t = inAOOffset + 0.0001;
		float voxelSize = 0.0;
		float volume = 0.0;
		do {

			float lod = clamp(log2(t*coneDirs[i].w*inAmbVolShortestEdge), 0.0, inAmbVolMaxLod);
			
			vec3 pos = normalizedPos + t*dir;
			
			float vis = textureLod(inDensityTex, pos, lod).r;
			
			ambientCone += (1.0 - ambientCone) * vis;
			if (ambientCone > 0.99) 
				break;

			t += t * coneDirs[i].w;
		} while (t<inAOConeLength); 
		
		ambient += ambientCone;
	} 
	

	ambient = 1.0 - clamp(inAOStrength * ambient / float(NUM_CONEDIRS), 0.0, 1.0);

	return ambient;
}
				
				]]>
			</snippet>

		</namespace>

	</namespace>
</btf>