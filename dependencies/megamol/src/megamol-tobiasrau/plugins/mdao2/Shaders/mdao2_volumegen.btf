<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="mdao2_volumegen">
	
	<shader name="geometry">
		<snippet type="string">
		<![CDATA[
#version 150
#extension GL_EXT_geometry_shader4: enable

layout (points) in;
layout (points, max_vertices = 64) out;

uniform vec3 inBoundsMin;
uniform vec3 inBoundsSizeInverse;
uniform vec3 inVolumeSize;
uniform float inGlobalRadius;

uniform vec4 inClipDat;

flat out vec4 gsCenterAndSqrRadius;
flat out float gsCellZ;

vec3 normalizedPosition;

// Emit a disk by setting a position and a layer (to be rendered into the volume texture)
// Also set the point size to serve as a canvas and pass the fragment shader a vector
// that contains the disk center (in moved object coordinates) and the squared radius
void emitDisk(int layer, float diskSize, float radius) {

	gl_Layer = layer;
	gsCellZ = layer;
	gl_PointSize = int(2.0*ceil(diskSize * max(inBoundsSizeInverse.x*inVolumeSize.x, inBoundsSizeInverse.y*inVolumeSize.y)));
	gl_Position = vec4(normalizedPosition.xyz*2.0 - 1.0, 1.0);
	gsCenterAndSqrRadius = vec4(gl_PositionIn[0].xyz - inBoundsMin, radius*radius);

	EmitVertex();
	EndPrimitive();
}

// Create information for a whole hemisphere (excluding the center cross section) by
// calculating radii of cross sections and emitting a disk of appropriate size
void emitHemisphere(int layer, int numSlices, float radius, float offset, int sliceStep) {

	for (int i=1; i<=numSlices; ++i) {
		// Calculate the distance to the nearest border of the current slice (in object coordinates)
		
		float dist = (float(i-1)/inVolumeSize.z + offset) / inBoundsSizeInverse.z;
		
		//float dist = ((float(i-1)-0.5)/inVolumeSize.z + offset) / inBoundsSizeInverse.z;
		// Recalculate the new radius
		float newSqrRadius = radius*radius - dist*dist;

		// FIXME: Can this happen?
		if (newSqrRadius < 0.0)
			break;
		
		// Emit a new disk
		emitDisk(layer + sliceStep * i, sqrt(newSqrRadius), radius);
	} 

}



void main() {

    // clipping
    float od = inClipDat.w - 1.0;
    if (any(notEqual(inClipDat.xyz, vec3(0, 0, 0)))) {
		od = dot(gl_PositionIn[0].xyz, inClipDat.xyz) - gl_PositionIn[0].w;
	}
	if (od > inClipDat.w)
		return;
		
	// Convert object space to normalized pixel space in [0 - 1]
	normalizedPosition = (gl_PositionIn[0].xyz - inBoundsMin)*inBoundsSizeInverse;

	float radius = gl_PositionIn[0].w;
	
	// Calculate the number of slices needed for one half of the sphere
	int numSlices = int(ceil(radius * inBoundsSizeInverse.z * inVolumeSize.z));

	gl_Position = vec4(normalizedPosition.xyz*2.0 - 1.0, 1.0);

	// Calculate the center layer
	int centerLayer = int(floor(normalizedPosition.z * inVolumeSize.z/* + 0.5*/));
	emitDisk(centerLayer, radius, radius);
	
	// Calculate the offset in Z direction from the center of the center layer
	float sliceThickness = 1.0 / inVolumeSize.z; 
	float zOffset = fract(normalizedPosition.z * inVolumeSize.z)/inVolumeSize.z;

	// Emit a hemisphere in negative direction
	emitHemisphere(centerLayer, numSlices, radius, zOffset, -1);
	// Emit a hemisphere in positive direction
	emitHemisphere(centerLayer, numSlices, radius, sliceThickness - zOffset, +1);
}

		]]>
		</snippet>
	</shader>

	<shader name="fragment">
		<snippet type="string">
		<![CDATA[
#version 150
		
out vec4 fsResultColor;
flat in vec4 gsCenterAndSqrRadius;
flat in float gsCellZ;
uniform vec3 inBoundsSizeInverse;
uniform vec3 inVolumeSize;

void main() {

	// The size of one cell in object coordinates
	vec3 cellSize = 1.0/(inVolumeSize * inBoundsSizeInverse);
	
	// Get the min vector of this cell in object coordinates
	vec3 cellMin = vec3(gl_FragCoord.xy - 0.5, gsCellZ)*cellSize;
	
	// Vector from the sphere to the closest cell point
	vec3 sphereCenterToCellMin = cellMin - gsCenterAndSqrRadius.xyz; 
	// Vector from the sphere center to opposite cell point
	vec3 sphereCenterToCellMax = cellMin - gsCenterAndSqrRadius.xyz + cellSize;
	
	// Absolute values of farthest and closest cell corner to the sphere center
	vec3 farthestPoint = max(abs(sphereCenterToCellMin), abs(sphereCenterToCellMax));
	vec3 closestPoint = min(abs(sphereCenterToCellMin), abs(sphereCenterToCellMax));
	
	// Check if the cell is completely outside of the spehre
	// This is the case when the cell corner point with the smallest distance from the sphere
	// center lies outside of the sphere
	if (dot(closestPoint, closestPoint) - gsCenterAndSqrRadius.w > 0.0) {
		discard;
		return;
	}
	
	
	// Check if the cell is completely contained in the sphere
	// This is the case when the cell corner point with the greatest distance from the sphere
	// center lies in the sphere
	if (dot(farthestPoint, farthestPoint) - gsCenterAndSqrRadius.w  < 0.0) {
		fsResultColor = vec4(1.0);
		return;
	}
	
	float radius = sqrt(gsCenterAndSqrRadius.w);
	
	// Check if the sphere is completely contained in the cell
	// This is the case when the bounding box of the sphere is contained in the cell
	if (all(lessThanEqual(sphereCenterToCellMin, -vec3(radius))) && all(greaterThanEqual(sphereCenterToCellMax, vec3(radius)))) {
		// Calculate the volume fraction
		float sphereVol = 4.0/3.0*3.14152 * gsCenterAndSqrRadius.w*radius;
		float cellVol = cellSize.x*cellSize.y*cellSize.z;
		float frac = sphereVol / cellVol;
		fsResultColor = vec4(frac);
		return;
	}
	
	// Now that the farthest point is not within the cell and the sphere is not completely inside the cell we have
	// something in between. We approximate the volume by lame sampling...
	const int samplesPerEdge = 3;
	const int samplesCount = samplesPerEdge * samplesPerEdge * samplesPerEdge;
	const float stepSize = 1.0/(float(samplesPerEdge) - 1.0);
	
	int numHit = 0;
	
	for (int x = 0; x<samplesPerEdge; ++x)
		for (int y=0; y<samplesPerEdge; ++y)
			for (int z=0; z<samplesPerEdge; ++z) {
				// Generate the test point in normalized coordinates
				vec3 sphereCenterToTest = (cellMin + cellSize * vec3(float(x),float(y),float(z)) * stepSize) - gsCenterAndSqrRadius.xyz;

				if (dot(sphereCenterToTest, sphereCenterToTest) - gsCenterAndSqrRadius.w < 0.0)
					numHit++;
			}

	fsResultColor = vec4(float(numHit)/float(samplesCount));
//	fsResultColor = vec4(1.0);
}
		
		]]>
		</snippet>
	</shader>

	<shader name="vertex">
		<snippet type="string">
		<![CDATA[
#version 150

in vec4 position;
// in vec4 color;

uniform float inGlobalRadius;
flat out vec4 vsColor;

void main() {
	float radius = (inGlobalRadius>0.0? inGlobalRadius: position.w);
	// float radius = (position.w > 0.0? position.w: inGlobalRadius);
	gl_Position = vec4(position.xyz, radius);
}
		]]>
		</snippet>
	</shader>

	
</btf>