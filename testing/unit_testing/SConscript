# SConscript file for testing
#

Import('env')     # import Environment object from calling SConstruct

# if the option no_tests was given, quit the script
if not env['no_tests']:

  # define the source files
  src_files = Glob('src/*.cpp')

  #src_files = ['src/solid_mechanics.cpp', 'src/main.cpp']
  #src_files = ['src/poisson.cpp', 'src/main.cpp', 'src/utility.cpp']
  # all src files:
  src_files = ['src/diffusion.cpp', 'src/faces.cpp', 'src/field_variable.cpp', 'src/laplace.cpp',
               'src/mesh.cpp', 'src/node_positions_tester.h', 'src/src/numerical_integration.cpp',
               'src/operator_splitting.cpp', 'src/output.cpp', 'src/poisson.cpp', 'src/solid_mechanics.cpp',
               'src/unstructured_deformable.cpp', 'src/main.cpp', 'src/utility.cpp']
  
  src_files = ['src/diffusion.cpp', 'src/unstructured_deformable.cpp', 'src/main.cpp', 'src/utility.cpp']
  
  
  
  print ""
  print "WARNING: only compiling tests ",src_files

  program = env.Program('run_tests', source=src_files)
  #Depends(test, program)

  if env["BUILD_TYPE"] == "debug":
    variant_directory = "build_debug"
  else:
    variant_directory = "build_release"
  #env.Install(variant_directory, program)

  # add command that runs the tests after build
  test = env.Command(target = 'test', source = './run_tests', action = 'cd testing/unit_testing/'+variant_directory+' && ./run_tests')
  AlwaysBuild(test)
