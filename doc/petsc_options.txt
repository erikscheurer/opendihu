
-snes_type newtonls   # newton with line search 
-snes_type newtontr   # newton with trust region

-snes_type <type> 	- newtonls, newtontr, ngmres, ncg, nrichardson, qn, vi, fas, SNESType for complete list
-snes_stol 	- convergence tolerance in terms of the norm of the change in the solution between steps
-snes_atol <abstol> 	- absolute tolerance of residual norm
-snes_rtol <rtol> 	- relative decrease in tolerance norm from initial
-snes_divergence_tolerance <divtol> 	- if the residual goes above divtol*rnorm0, exit with divergence
-snes_force_iteration <force> 	- force SNESSolve() to take at least one iteration
-snes_max_it <max_it> 	- maximum number of iterations
-snes_max_funcs <max_funcs> 	- maximum number of function evaluations
-snes_max_fail <max_fail> 	- maximum number of line search failures allowed before stopping, default is none
-snes_max_linear_solve_fail 	- number of linear solver failures before SNESSolve() stops
-snes_lag_preconditioner <lag> 	- how often preconditioner is rebuilt (use -1 to never rebuild)
-snes_lag_jacobian <lag> 	- how often Jacobian is rebuilt (use -1 to never rebuild)
-snes_trtol <trtol> 	- trust region tolerance
-snes_no_convergence_test 	- skip convergence test in nonlinear solver; hence iterations will continue until max_it or some other criterion is reached. Saves expense of convergence test
-snes_monitor [ascii][:filename][:viewer format] 	- prints residual norm at each iteration. if no filename given prints to stdout
-snes_monitor_solution [ascii binary draw][:filename][:viewer format] 	- plots solution at each iteration
-snes_monitor_residual [ascii binary draw][:filename][:viewer format] 	- plots residual (not its norm) at each iteration
-snes_monitor_solution_update [ascii binary draw][:filename][:viewer format] 	- plots update to solution at each iteration
-snes_monitor_lg_residualnorm 	- plots residual norm at each iteration
-snes_monitor_lg_range 	- plots residual norm at each iteration
-snes_fd 	- use finite differences to compute Jacobian; very slow, only for testing
-snes_fd_color 	- use finite differences with coloring to compute Jacobian
-snes_mf_ksp_monitor 	- if using matrix-free multiply then print h at each KSP iteration
-snes_converged_reason 	- print the reason for convergence/divergence after each solve 


-snes_linesearch_type basic     # kein line search, einfach gradient, skaliert mit DÃ¤mpfungskonstante
-snes_linesearch_damping 0.001  
	

-snes_linesearch_type bt   # backtracking line search	-snes_linesearch_alpha<1e	- 4> - slope descent parameter
	-snes_linesearch_damping<1.0> 	- initial step length
	-snes_linesearch_maxstep <length> 	- if the length the initial step is larger than this then the step is scaled back to be of this length at the beginning of the line search
	-snes_linesearch_max_it<40> 	- maximum number of shrinking step
	-snes_linesearch_minlambda<1e	- 12> - minimum step length allowed
	-snes_linesearch_order<cubic,quadratic> 	- order of the approximation 

